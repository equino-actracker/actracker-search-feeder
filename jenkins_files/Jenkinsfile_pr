pipeline {
    agent any

    tools {
        jdk 'jdk21'
    }

    options {
        lock resource: 'actracker-search-feeder_pr'
        buildDiscarder(logRotator(numToKeepStr: '10'))
    }

    environment {
        EQUINO_MAVEN_CREDENTIALS = credentials('EquinoReposilite')
        ORG_GRADLE_PROJECT_mavenEquinoUsername = "${EQUINO_MAVEN_CREDENTIALS_USR}"
        ORG_GRADLE_PROJECT_mavenEquinoPassword = "${EQUINO_MAVEN_CREDENTIALS_PSW}"
    }

    stages {

        stage('Check release readiness') {
            steps {
                sh 'git branch -m ${CHANGE_BRANCH}'
                sh './gradlew --no-daemon --stacktrace verifyRelease'
            }
        }

        stage('Set project version') {
            steps {
                // Creates build/ovh.equino.version/currentVersion file
                sh './gradlew --no-daemon build'
                script {
                    currentBuild.displayName = readFile file: 'build/ovh.equino.version/currentVersion'
                }
                sh './mvnw versions:set -DnewVersion=`cat build/ovh.equino.version/currentVersion`'
            }
        }

        stage('Build') {
            steps {
                sh './mvnw clean verify'
            }
        }

        stage('Build and push Docker') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'EquinoDockerRegistry', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                    sh './mvnw k8s:build k8s:push -Djkube.docker.username=${USERNAME} -Djkube.docker.password=${PASSWORD}'
                }
            }
        }

        stage('Deploy') {
            steps {
                withKubeConfig([credentialsId: 'MadritKubeConfig', namespace: 'equino-dev']) {
                    sh './mvnw k8s:resource k8s:apply'
                }
            }
        }

    }

    post {
        cleanup {
            deleteDir()
        }
    }
}