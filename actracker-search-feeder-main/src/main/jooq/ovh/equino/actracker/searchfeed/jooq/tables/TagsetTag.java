/*
 * This file is generated by jOOQ.
 */
package ovh.equino.actracker.searchfeed.jooq.tables;


import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function2;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import ovh.equino.actracker.searchfeed.jooq.Keys;
import ovh.equino.actracker.searchfeed.jooq.Public;
import ovh.equino.actracker.searchfeed.jooq.tables.records.TagsetTagRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TagsetTag extends TableImpl<TagsetTagRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.tagset_tag</code>
     */
    public static final TagsetTag TAGSET_TAG = new TagsetTag();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TagsetTagRecord> getRecordType() {
        return TagsetTagRecord.class;
    }

    /**
     * The column <code>public.tagset_tag.tagset_id</code>.
     */
    public final TableField<TagsetTagRecord, String> TAGSET_ID = createField(DSL.name("tagset_id"), SQLDataType.VARCHAR(36).nullable(false), this, "");

    /**
     * The column <code>public.tagset_tag.tag_id</code>.
     */
    public final TableField<TagsetTagRecord, String> TAG_ID = createField(DSL.name("tag_id"), SQLDataType.VARCHAR(36).nullable(false), this, "");

    private TagsetTag(Name alias, Table<TagsetTagRecord> aliased) {
        this(alias, aliased, null);
    }

    private TagsetTag(Name alias, Table<TagsetTagRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.tagset_tag</code> table reference
     */
    public TagsetTag(String alias) {
        this(DSL.name(alias), TAGSET_TAG);
    }

    /**
     * Create an aliased <code>public.tagset_tag</code> table reference
     */
    public TagsetTag(Name alias) {
        this(alias, TAGSET_TAG);
    }

    /**
     * Create a <code>public.tagset_tag</code> table reference
     */
    public TagsetTag() {
        this(DSL.name("tagset_tag"), null);
    }

    public <O extends Record> TagsetTag(Table<O> child, ForeignKey<O, TagsetTagRecord> key) {
        super(child, key, TAGSET_TAG);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<TagsetTagRecord> getPrimaryKey() {
        return Keys.TAGSET_TAG_PKEY;
    }

    @Override
    public List<ForeignKey<TagsetTagRecord, ?>> getReferences() {
        return Arrays.asList(Keys.TAGSET_TAG__TAGSET_FK, Keys.TAGSET_TAG__TAG_FK);
    }

    private transient TagSet _tagSet;
    private transient Tag _tag;

    /**
     * Get the implicit join path to the <code>public.tag_set</code> table.
     */
    public TagSet tagSet() {
        if (_tagSet == null)
            _tagSet = new TagSet(this, Keys.TAGSET_TAG__TAGSET_FK);

        return _tagSet;
    }

    /**
     * Get the implicit join path to the <code>public.tag</code> table.
     */
    public Tag tag() {
        if (_tag == null)
            _tag = new Tag(this, Keys.TAGSET_TAG__TAG_FK);

        return _tag;
    }

    @Override
    public TagsetTag as(String alias) {
        return new TagsetTag(DSL.name(alias), this);
    }

    @Override
    public TagsetTag as(Name alias) {
        return new TagsetTag(alias, this);
    }

    @Override
    public TagsetTag as(Table<?> alias) {
        return new TagsetTag(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public TagsetTag rename(String name) {
        return new TagsetTag(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TagsetTag rename(Name name) {
        return new TagsetTag(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public TagsetTag rename(Table<?> name) {
        return new TagsetTag(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<String, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function2<? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function2<? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
