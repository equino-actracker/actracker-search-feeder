/*
 * This file is generated by jOOQ.
 */
package ovh.equino.actracker.searchfeed.jooq.tables;


import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function2;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import ovh.equino.actracker.searchfeed.jooq.Keys;
import ovh.equino.actracker.searchfeed.jooq.Public;
import ovh.equino.actracker.searchfeed.jooq.tables.records.ActivityTagRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ActivityTag extends TableImpl<ActivityTagRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.activity_tag</code>
     */
    public static final ActivityTag ACTIVITY_TAG = new ActivityTag();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ActivityTagRecord> getRecordType() {
        return ActivityTagRecord.class;
    }

    /**
     * The column <code>public.activity_tag.activity_id</code>.
     */
    public final TableField<ActivityTagRecord, String> ACTIVITY_ID = createField(DSL.name("activity_id"), SQLDataType.VARCHAR(36).nullable(false), this, "");

    /**
     * The column <code>public.activity_tag.tag_id</code>.
     */
    public final TableField<ActivityTagRecord, String> TAG_ID = createField(DSL.name("tag_id"), SQLDataType.VARCHAR(36).nullable(false), this, "");

    private ActivityTag(Name alias, Table<ActivityTagRecord> aliased) {
        this(alias, aliased, null);
    }

    private ActivityTag(Name alias, Table<ActivityTagRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.activity_tag</code> table reference
     */
    public ActivityTag(String alias) {
        this(DSL.name(alias), ACTIVITY_TAG);
    }

    /**
     * Create an aliased <code>public.activity_tag</code> table reference
     */
    public ActivityTag(Name alias) {
        this(alias, ACTIVITY_TAG);
    }

    /**
     * Create a <code>public.activity_tag</code> table reference
     */
    public ActivityTag() {
        this(DSL.name("activity_tag"), null);
    }

    public <O extends Record> ActivityTag(Table<O> child, ForeignKey<O, ActivityTagRecord> key) {
        super(child, key, ACTIVITY_TAG);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<ActivityTagRecord> getPrimaryKey() {
        return Keys.ACTIVITY_TAG_PKEY;
    }

    @Override
    public List<ForeignKey<ActivityTagRecord, ?>> getReferences() {
        return Arrays.asList(Keys.ACTIVITY_TAG__ACTIVITY_FK, Keys.ACTIVITY_TAG__TAG_FK);
    }

    private transient Activity _activity;
    private transient Tag _tag;

    /**
     * Get the implicit join path to the <code>public.activity</code> table.
     */
    public Activity activity() {
        if (_activity == null)
            _activity = new Activity(this, Keys.ACTIVITY_TAG__ACTIVITY_FK);

        return _activity;
    }

    /**
     * Get the implicit join path to the <code>public.tag</code> table.
     */
    public Tag tag() {
        if (_tag == null)
            _tag = new Tag(this, Keys.ACTIVITY_TAG__TAG_FK);

        return _tag;
    }

    @Override
    public ActivityTag as(String alias) {
        return new ActivityTag(DSL.name(alias), this);
    }

    @Override
    public ActivityTag as(Name alias) {
        return new ActivityTag(alias, this);
    }

    @Override
    public ActivityTag as(Table<?> alias) {
        return new ActivityTag(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ActivityTag rename(String name) {
        return new ActivityTag(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ActivityTag rename(Name name) {
        return new ActivityTag(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ActivityTag rename(Table<?> name) {
        return new ActivityTag(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<String, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function2<? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function2<? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
